/*
function template is a feature in c++ to 
avoid the code repeatition as we do function overloading.

->Function templates are just blueprints. They are not real c++ code consumed by compiler. The compiler generates real c++ code consumed by the  compiler. 
The compiler genrates real c++ code by looking at the arguments you call your function template with.

-> The real C++ function generated by the compiler is called a template instance.

-> A template instance will be reused when a similar function call (argument type)
is issued. No duplicates are generated by the compiler.

*/ 


template <typename T>T maximum(T a, T b);  // to see the insights go visit : cppinsights.io

#include <iostream>
using namespace std;
int main()
{
   int w=44;
   int p=84;
   double u=55.0;
   double v=88.7;
   string_view x="Rush";
   string_view y="Sush";

   int *p_w{&w};
   int *p_p{&p};

   cout << "max(int) : " << maximum(w,p) << endl;
      cout << "max(double) : " << maximum(u,v) << endl;
         cout << "max(string) : " << maximum(x,y) << endl;

cout << "--------------------------------------------" << endl;


cout << "comparing address and then dereferencing : " << *(maximum(p_w,p_p))  << " comparing value:   " << maximum(*p_w,*p_p) << endl;
 


 return 0;
}

template <typename T> 
T maximum(T a, T b)
{
    return (a>b)? a:b ;
   }